// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CampProgram {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl  String?
  videoUrl  String?
  slug      String @unique
  location String
  lat Float
  lng Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sessions CampSession[]
  hosts    CampProgramHost[]

  @@map("camp_programs")
}

model CampSession {
  id             String        @id @default(cuid())
  label          String
  priority       Int
  startDate      DateTime
  endDate        DateTime
  period         SessionPeriod
  availableSlots Int
  price Float
  status         CampStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  campProgram   CampProgram @relation(fields: [campProgramId], references: [id])
  campProgramId String

  bookings Booking[]

  @@map("camp_sessions")
}

model Host {
  id        String   @id @default(cuid())
  name      String
  bio       String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campPrograms CampProgramHost[]

  @@map("hosts")
}

model CampProgramHost {
  id            String      @id @default(cuid())
  campProgram   CampProgram @relation(fields: [campProgramId], references: [id])
  campProgramId String
  host          Host        @relation(fields: [hostId], references: [id])
  hostId        String

  @@map("camp_program_hosts")
}

enum SessionPeriod {
  MORNING
  AFTERNOON
  EVENING
}

enum CampStatus {
  ACTIVE
  INACTIVE
  FULL
  CANCELLED
}

model Booking {
  id        String      @id @default(cuid())
  sessionId String
  stripeId  String  @unique
  session   CampSession @relation(fields: [sessionId], references: [id])

  amount        Float
  campName      String
  athleteName   String
  email         String
  status        BookingStatus
  paymentStatus PaymentStatus
  rawData       String?
  acceptedTerms Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

model User {
  id String @id @default(cuid())
  auth_id String
  email String @unique
  username String
  password String
  role UserRoles
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


enum UserRoles {
  USER
  ADMIN
}

model Post {
  id String @id @default(cuid())
  description String
  tags String
  url String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("posts")
}

model Company {
  id String @id @default(cuid())
  brandName String
  shortDescription String
  description String
  logoUrl String
  email String
  phone String
  address String
  lat Float
  lng Float
  facebook String
  instagram String
  twitter String
  tiktok String
  youtube String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("companies")
}